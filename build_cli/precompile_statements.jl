precompile(Tuple{Base.JuliaSyntax.var"#invoke_fixedworld#120"{Base.JuliaSyntax.var"#invoke_fixedworld#117#121"{typeof(Base.JuliaSyntax.core_parser_hook), UInt64}}, Core.SimpleVector, Vararg{Any}})
precompile(Tuple{Base.JuliaSyntax.var"#invoke_fixedworld#117#121"{typeof(Base.JuliaSyntax.core_parser_hook), UInt64}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Base.JuliaSyntax.var"#invoke_fixedworld#120"{Base.JuliaSyntax.var"#invoke_fixedworld#117#121"{typeof(Base.JuliaSyntax.core_parser_hook), UInt64}}, Core.SimpleVector, Vararg{Any}})
precompile(Tuple{typeof(Base.JuliaSyntax.core_parser_hook), Core.SimpleVector, String, Int64, Int64, Symbol})
precompile(Tuple{typeof(Base.unsafe_wrap), Type{Array{T, N} where N where T}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.uv_writecb_task), Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Base.println), Base.TTY, String})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Base.Channel{Tuple{FASTX.FASTQ.Record, FASTX.FASTQ.Record}}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.Iterators.map), Function, Tuple{DataType, DataType}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.eltype), Tuple{DataType, DataType}})
precompile(Tuple{typeof(Base.getproperty), Base.Generator{Tuple{DataType, DataType}, typeof(Base.eltype)}, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:k, :check_rc), Tuple{Int64, Bool}}, typeof(Kmer64.filter_paired_reads_threaded), Vararg{String, 5}})
precompile(Tuple{Kmer64.var"#25#29"{String, String, Base.Channel{Base.Channel{Tuple{FASTX.FASTQ.Record, FASTX.FASTQ.Record}}}}})
precompile(Tuple{Kmer64.var"#28#32"{Array{Tuple{FASTX.FASTQ.Record, FASTX.FASTQ.Record}, 1}, Base.Channel{Tuple{FASTX.FASTQ.Record, FASTX.FASTQ.Record}}, Int64, Kmer64.KmerDataSet}})
precompile(Tuple{typeof(Base.getproperty), Task, Symbol})
precompile(Tuple{FASTX.FASTQ.var"#8#10", FASTX.FASTQ.Writer{TranscodingStreams.TranscodingStream{TranscodingStreams.Noop, Base.IOStream}}})
precompile(Tuple{typeof(Base.iterate), Base.Set{Char}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :required), Tuple{String, Bool}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :required), Tuple{String, Bool}}}})
precompile(Tuple{typeof(ArgParse.default_action), ArgParse.ArgConsumerType})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgConsumerType, Symbol})
precompile(Tuple{typeof(ArgParse.default_action), Symbol})
precompile(Tuple{typeof(Base.startswith), String, Char})
precompile(Tuple{typeof(Base.in), Char, String})
precompile(Tuple{typeof(Base.occursin), Base.Regex, String})
precompile(Tuple{typeof(Base.push!), Array{AbstractString, 1}, String})
precompile(Tuple{ArgParse.var"#r#22"{Bool}, Any})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ArgParseField, Symbol, Symbol})
precompile(Tuple{typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(Base.isempty), Array{String, 1}})
precompile(Tuple{typeof(ArgParse.name_to_fieldnames!), ArgParse.ArgParseSettings, Union{Array{T, 1}, T} where T<:AbstractString})
precompile(Tuple{typeof(Base.getindex), Type{AbstractString}})
precompile(Tuple{typeof(Base.foreach), ArgParse.var"#do_one#21"{ArgParse.ArgParseSettings, ArgParse.var"#r#20"{ArgParse.ArgParseSettings}, Array{AbstractString, 1}, Array{AbstractString, 1}, Array{AbstractString, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default, :help, :arg_type), Tuple{Int64, String, DataType}}}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(ArgParse.check_default_type), Int64, Type})
precompile(Tuple{typeof(ArgParse.typecompatible), Int64, Type})
precompile(Tuple{ArgParse.var"#27#29", Any})
precompile(Tuple{typeof(ArgParse._convert_default), Type, Int64})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:help, :action), Tuple{String, Symbol}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:help, :action), Tuple{String, Symbol}}}})
precompile(Tuple{typeof(Base.all), Function, Array{String, 1}})
precompile(Tuple{typeof(Base._all), ArgParse.var"#70#72", Array{String, 1}, Base.Colon})
precompile(Tuple{Type{GenericMemory{:not_atomic, String, Core.AddrSpace{Core}(0x00)}}, UndefInitializer, Int64})
precompile(Tuple{Base.var"#739#740"{ArgParse.var"#71#73"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Base.Channel{Any}}})
precompile(Tuple{ArgParse.var"#71#73"{ArgParse.ArgParseSettings, ArgParse.ParserState}, Any})
precompile(Tuple{typeof(ArgParse.preparse!), Base.Channel{T} where T, ArgParse.ParserState, ArgParse.ArgParseSettings})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ParserState, Symbol})
precompile(Tuple{typeof(Base.findfirst), Function, String})
precompile(Tuple{typeof(Base.setproperty!), ArgParse.ParserState, Symbol, String})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Symbol})
precompile(Tuple{typeof(ArgParse.parse_item_wrapper), Type{Any}, AbstractString})
precompile(Tuple{typeof(ArgParse.parse_item), Type{Any}, AbstractString})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Char, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Char, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base._any), ArgParse.var"#74#75"{String}, Array{AbstractString, 1}, Base.Colon})
precompile(Tuple{ArgParse.var"#74#75"{String}, Any})
precompile(Tuple{Base.var"#743#744"{Base.Channel{Any}, Task}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:k, :check_rc), Tuple{Int64, Bool}}, typeof(Kmer64.filter_paired_reads), Vararg{String, 5}})
precompile(Tuple{Kmer64.var"#31#35"{String, String, Base.Channel{Base.Channel{Tuple{FASTX.FASTQ.Record, FASTX.FASTQ.Record}}}}})
precompile(Tuple{Kmer64.var"#34#38"{Array{Tuple{FASTX.FASTQ.Record, FASTX.FASTQ.Record}, 1}, Base.Channel{Tuple{FASTX.FASTQ.Record, FASTX.FASTQ.Record}}, Int64, Kmer64.KmerDataSet, Kmer64.KmerDataSet}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:clear, :verbose), Tuple{Bool, Bool}}, typeof(LinearAlgebra.BLAS.lbt_forward), String})
precompile(Tuple{LinearAlgebra.BLAS.var"##lbt_forward#15", Bool, Bool, Nothing, typeof(LinearAlgebra.BLAS.lbt_forward), String})
precompile(Tuple{typeof(LinearAlgebra.BLAS._clear_config_with), LinearAlgebra.BLAS.var"#16#17"{Bool, Bool, Nothing, String}})
precompile(Tuple{LinearAlgebra.BLAS.var"#13#14"{LinearAlgebra.BLAS.var"#16#17"{Bool, Bool, Nothing, String}}})
precompile(Tuple{typeof(Base.cconvert), Type, Ptr{Nothing}})
precompile(Tuple{typeof(Base.convert), Type{Base.Cstring}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Base.Cstring}, Base.Cstring})
precompile(Tuple{LinearAlgebra.BLAS.var"#16#17"{Bool, Bool, Nothing, String}})
precompile(Tuple{typeof(LinearAlgebra.BLAS.check)})
precompile(Tuple{typeof(LinearAlgebra.BLAS.get_config)})
precompile(Tuple{typeof(LinearAlgebra.BLAS.lbt_get_config)})
precompile(Tuple{LinearAlgebra.BLAS.var"#11#12"})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, LinearAlgebra.BLAS.LBTLibraryInfo, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{Type{LinearAlgebra.BLAS.LBTConfig}, LinearAlgebra.BLAS.lbt_config_t})
precompile(Tuple{Type{LinearAlgebra.BLAS.LBTLibraryInfo}, LinearAlgebra.BLAS.lbt_library_info_t, UInt32})
precompile(Tuple{typeof(LinearAlgebra.BLAS.set_num_threads), Int64})
precompile(Tuple{typeof(Random.seed!), Random.TaskLocalRNG})
precompile(Tuple{typeof(Random.seed!), Random.TaskLocalRNG, Nothing})
precompile(Tuple{typeof(Base.rand), Random.RandomDevice, Type{UInt64}})
precompile(Tuple{typeof(Base.rand), Random.RandomDevice, Random.SamplerType{UInt64}})
precompile(Tuple{typeof(Random.initstate!), Random.TaskLocalRNG, NTuple{4, UInt64}})
precompile(Tuple{typeof(Random.setstate!), Random.TaskLocalRNG, NTuple{5, UInt64}})
precompile(Tuple{typeof(Base.copy!), Random.Xoshiro, Random.TaskLocalRNG})
precompile(Tuple{typeof(Random.getstate), Random.TaskLocalRNG})
precompile(Tuple{typeof(ArgParse.argparse_error), Any})
precompile(Tuple{Type{ArgParse.ArgParseError}, AbstractString})
precompile(Tuple{typeof(ArgParse.default_handler), ArgParse.ArgParseSettings, Any})
precompile(Tuple{typeof(ArgParse.default_handler), ArgParse.ArgParseSettings, Any, Int64})
precompile(Tuple{typeof(Base.isinteractive)})
precompile(Tuple{typeof(ArgParse.cmdline_handler), ArgParse.ArgParseSettings, Any, Int64})
precompile(Tuple{typeof(Base.getproperty), ArgParse.ArgParseError, Symbol})
precompile(Tuple{typeof(Base.:(*)), Vararg{String, 4}})